package view_repair

import imgui
import csdbc_mysql

using system
using imgui


#bug记录：
#1.报修按钮只有第一个能用 
#已解决:不同的报修按钮取不同的名字
#2.筛选界面的exit按钮 点击后返回主界面 记录仍未筛选内容  
#已解决：查询语句不共用同一个变量 res


var select_way = {"按物资id查找","按物资状态查找","按物资名字查找"}
var select_kind = 3
var input_con = ""
var select_res = new array

var w2_state = false
var w3_state = false
var w4_state = false
var select_state = false

var repair_bs = new array
var repair_w_state = new hash_map
var repair_con = new array



function all_items_ifo(manager_id)
    import db_connector
    var db = db_connector.start()
    if db == null
        system.out.println("连接失败,程序终止！")
        system.exit(1)
    end
    #db.just_exec("insert into propertys(eq_name, manager) values(\"a\",1)")
    
    #var stmt = db.prepare("insert into propertys(eq_name, manager) values(\"?\",1)")
    #var name = "a"
    #stmt.bind(0, name)
    #stmt.just_exec()
    
    var res = db.exec("select * from propertys where manager=\"" + manager_id + "\"")
    #var p =1
    #var res = db.exec("select * from propertys where manager=\"" + manager_id + "\"")
    #select出所有该manager管理的记录
    #var res = db.exec("select * from testtb")
    return res
end

function view_all_items(res,manager_id)
    #作用：查看某个管理员管辖的所有物品
    #按钮触发 gui界面长期存在
  
    #if(repair_w_state.empty())
     #   for i=0,i<res.size,++i
      #      repair_w_state.push_back(false)
      #  end
    #end

    #打开基础窗口
    var window_opened = true
    begin_window("view##w1",window_opened,{})
        set_window_pos(vec2(0,0))
        set_window_size(vec2(get_monitor_width(0),get_monitor_height(0)))

        foreach i in res
            #repair_con.push_back(i)
            repair_button_process(i)
            #text(data_in_line)
            #same_line()
            #var b_repair = button("报修##bi")
            #repair_bs.push_back(b_repair)
            
        end
        
         #下拉框 选择筛选方式
         var c1 = combo_box("查找方式",select_kind,select_way)
         #输入框 输入筛选内容
         var i1 = input_text("", input_con, 100)
         #按钮 确认进入筛选界面
         same_line()
         var b1 = button("筛选")

         text(" ")
         text(" ")
         text(" ")
         text(" ")

 
         #当b1筛选按钮按下 并且 输入框内容不为空
         if b1 && !input_con.empty()
             #改变窗口bool值状态
             switch select_kind
                 case 0
                     w2_state = true
                     select_state = true
                     text("0")
                 end
                 case 1
                     w3_state = true
                     select_state = true
                     text("1")
                 end
                 case 2
                     w4_state = true
                     select_state = true
                     text("2")
                 end
             end
         end
 
 
         if(select_state)
            import db_connector
            var db = db_connector.start()
            if db == null
                system.out.println("连接失败,程序终止！")
                system.exit(1)
            end
            if(w2_state)
                 #select_with_id(manager_id,input_con,w2_state)
                 #在数据库中用uuid进行筛选
                 select_res = db.exec("select * from propertys where manager=\"" + manager_id + "\" and uuid=\"" + input_con + "\"")
             end
             if(w3_state)
                 #select_with_id(manager_id,input_con,w3_state)
                  #在数据库中用signal进行筛选
                 select_res = db.exec("select * from propertys where manager=\"" + manager_id + "\" and signals=\"" + input_con + "\"")
             end
             if(w4_state)
                 #select_with_id(manager_id,input_con,w4_state)
                  #在数据库中用name进行筛选
                 select_res = db.exec("select * from propertys where manager=\"" + manager_id + "\" and eq_name like \"%" + input_con + "%\"")
             end
 
             var w2_is_open = true
             begin_window("select_with_##w2",w2_is_open,{})
                 #window属性设置
                 set_window_pos(vec2(0,0))
                 set_window_size(vec2(get_monitor_width(0),get_monitor_height(0)))
 
                 #处理记录为空情况
                 if(select_res.empty())
                     text("无该项记录")
                 end
                 
                 #将记录中数据全部输出
                 foreach i in select_res
                     var data_in_line = ""
                     foreach j in i
                         data_in_line += j.data + ' '
                     end
                     text(data_in_line)
                 end
                 
                 
                 #处理用户要退出的情况：1.按exit按钮 2.直接点×退出
                 if button("exit##b2") || !w2_is_open
                     select_state = false
                 end

                  #末尾两空行，不然点下面按钮不方便
                text("")
                text("")
                 
             end_window()   
      
                end
        

    
    end_window()
end


function repair_button_process(one_record)
    #将one_record处理为输出的字符串

    var data_in_line = ""
    foreach j in one_record
        data_in_line += j.data + '\t'
    end
    var cur_signal = one_record.back.data
    var cur_uuid = one_record.front.data
    #将字符串打印到屏幕，并放置报修按钮
    text(data_in_line)
    same_line()

    if cur_signal == "1" || cur_signal == "2" || cur_signal == "4"
        var button_name = "报修##b"
        button_name += cur_uuid
        var b_repair = button(button_name)
        
        #当报修按钮触发时
        if(b_repair)
            repair_w_state[cur_uuid] = true
        end
        if(repair_w_state.exit(cur_uuid) && repair_w_state[cur_uuid])
            report_repair(one_record)
        end
    end

    if cur_signal == "3"
        var button_name = "修理完成##b"
        button_name += to_string(count)
        var b_repair = button(button_name)
        
        #当报修按钮触发时
        if(b_repair)
            repair_w_state[cur_uuid] = true
        end
        if(repair_w_state.exit(cur_uuid) && repair_w_state[cur_uuid])
            data_supply(one_record)
        end
    end



end


function report_repair(repair_con)
    #作用：进行报修填表
    #构建一个gui弹窗 报修按钮触发 输入框 + 完成按钮（关闭弹窗+上传数据+更改final）
    var cur_uuid = repair_con.front.data
    var w3_is_open = true
    begin_window("report_repair##w3",w3_is_open,{})
        text("this is report repair")

        if button("exit##b_repair_exit") || !w3_is_open
            repair_w_state[cur_uuid] = false;
        end
    end_window()   
end

#该函数作用为：工作完成后，补充维修相关信息
#构建一个gui弹窗（输入框 + 完成按钮（关闭弹窗+上传数据+更改final）
function data_supply(one_record,count)
    var cur_uuid = one_record.front.data
    var w4_is_open = true
    begin_window("data_supply##w4",w4_is_open,{})
        text("this is data_supply")

        if button("exit##b_supply_exit") || !w4_is_open
            repair_w_state[cur_uuid] = false;
        end
    end_window()   
end
