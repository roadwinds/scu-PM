import csv
import structs
import db_connector
import time_base64

package new_request

# 单条录入函数，传入一条要录入的条目数组以及管理员id。
#================注意：该函数每次调用必须间隔至少一秒钟，否则将导致时间戳冲突从而造成申请表中的item_id混乱！！！================
function single_insert(arr, group_admin)
    var pro = new structs.property
    var pla = new structs.place
    var req = new structs.request
    pro.eq_name = arr[0]
    pro.eq_type = arr[1]
    pro.brand = arr[2]
    pro.wbdw = arr[3]
    pro.time_limit = string.to_number(arr[4])
    if arr[5] == "是"
        pro.sfjz = 1
    else
        pro.sfjz = 0
    end
    if arr[6] == "是"
        pro.is_available = 1
    else
        pro.is_available = 0
    end
    pro.signal = 1
    pro.manager = group_admin

    pla.group_admin = group_admin
    pla.dd_first = arr[7]
    pla.dd_second = arr[8]
    pla.dd_third = string.to_number(arr[9])
    pla.dd_fourth = arr[10]

    check_place(pla)

    pro.local_place = pla.uuid

    req.requester = group_admin
    req.signals = 1
    req.reason = arr[11]
    req.request_time = time_base64.to_timestamp(runtime.local_time())

    pro.start_time = req.request_time

    add_pro(pro)

    get_uuid_single(pro)

    req.item_id = pro.uuid

    add_req(req)

    # 打印录入的结构体
    # show(pro, pla, req)
end

# 批量录入函数，传入一个包含多条信息的二维数组以及管理员id。
function multi_insert(values, group_admin)
    var timestamp = time_base64.to_timestamp(runtime.local_time())
    var reqs = new array
    var pros = new array
    var plas = new array
    var pro = new structs.property
    var pla = new structs.place
    var req = new structs.request
    foreach arr in values
        pro.uuid = 0
        pro.eq_name = arr[0]
        pro.eq_type = arr[1]
        pro.brand = arr[2]
        pro.wbdw = arr[3]
        pro.time_limit = string.to_number(arr[4])
        if arr[5] == "是"
            pro.sfjz = 1
        else
            pro.sfjz = 0
        end
        if arr[6] == "是"
            pro.is_available = 1
        else
            pro.is_available = 0
        end
        pro.signal = 1
        pro.manager = group_admin
        pro.start_time = timestamp

        pla.uuid = 0
        pla.group_admin = group_admin
        pla.dd_first = arr[7]
        pla.dd_second = arr[8]
        pla.dd_third = string.to_number(arr[9])
        pla.dd_fourth = arr[10]

        req.uuid = 0
        req.requester = group_admin
        req.signals = 1
        req.reason = arr[11]
        req.request_time = timestamp

        pros.push_back(pro)

        plas.push_back(pla)

        reqs.push_back(req)
    end

    check_places(plas)
    
    var x = 0
    foreach i in pros
        i.local_place = plas[x].uuid
        x++
    end

    add_pros(pros)

    var uuids = get_uuid_multi(group_admin, timestamp)

    x = 0
    foreach i in reqs
        i.item_id = uuids[x][0].data
        x++
    end

    add_reqs(reqs)
end

# 单条修改函数，按物品信息，申请信息，地点信息的顺序传入三个结构体
function single_change(pro, req, pla)
    check_place(pla)

    pro.local_place = pla.uuid

    change_pro(pro)

    change_req(req)
end

# 封装了异常处理和索引格式检查的csv读取函数，传入文件路径和用于存储纯条目信息的空二维数组（注：不返回索引）。
# gui设计时可重写该函数以适应图形化异常处理。
function check_csv(path, values)
    var std = {"设备名称", "规格型号", "品牌", "维保单位", "质保期限", "是否建账", "是否可备用", "校区", "教学楼", "层数", "门牌号", "提交原因"}
    var index = {}
    var erro = csv.read_csv(path, index, values)
    if erro != 0
        if erro ==-1
            system.out.print("文件内容中包含英文逗号或英文双引号。\n")
            system.exit(1)
        end
        if erro == -2
            system.out.print("读取文件时出错，请检查路径是否正确。\n")
            system.exit(1)
        end
    end

    if array.size(index) != 12
        system.out.println("格式错误，表格应该为12列。")
        system.exit(1)
    end
    var sub = 0
    foreach i in index
        if i != std[sub]
            system.out.print("格式错误，第")
            system.out.print(sub+1)
            system.out.println("列表头错误！")
            system.out.print("\"")
            system.out.print(i)
            system.out.print("\"")
            system.out.print("应为\"")
            system.out.print(std[sub])
            system.out.println("\"")
            system.exit(1)
        end
        sub++
    end
end

# 以下函数为数据库交互函数，切勿贸然直接调用，请使用经过封装的录入函数。
function check_place(loc)
    var db = db_connector.start()
    db.just_exec("ALTER TABLE places AUTO_INCREMENT = 1")
    var stmt_1 = db.prepare("SELECT uuid FROM places WHERE group_admin=? AND dd_first=? AND dd_second=? AND dd_third=? AND dd_fourth=?")
    var stmt_2 = db.prepare("INSERT INTO places(group_admin,dd_first,dd_second,dd_third,dd_fourth) values(?,?,?,?,?)")
    loc.iter_prepare()
        foreach i in range(1,6)
            stmt_1.bind(i-1,loc.arr[i])
        end
        loc.clear_arr()
        var res = stmt_1.exec()
        if array.empty(res)
            loc.iter_prepare()
            foreach i in range(1,6)
                stmt_2.bind(i-1,loc.arr[i])
            end
            loc.clear_arr()
            stmt_2.just_exec()
            loc.iter_prepare()
            foreach i in range(1,6)
                stmt_1.bind(i-1,loc.arr[i])
            end
            loc.clear_arr()
            res = stmt_1.exec()
            loc.uuid = res[0][0].data
        else
            loc.uuid = res[0][0].data
        end
end

function check_places(plas)
    var db = db_connector.start()
    db.just_exec("ALTER TABLE places AUTO_INCREMENT = 1")
    var stmt_1 = db.prepare("SELECT uuid FROM places WHERE group_admin=? AND dd_first=? AND dd_second=? AND dd_third=? AND dd_fourth=?")
    var stmt_2 = db.prepare("INSERT INTO places(group_admin,dd_first,dd_second,dd_third,dd_fourth) values(?,?,?,?,?)")
    foreach loc in plas
        loc.iter_prepare()
        foreach i in range(1,6)
            stmt_1.bind(i-1,loc.arr[i])
        end
        loc.clear_arr()
        var res = stmt_1.exec()
        if array.empty(res)
            loc.iter_prepare()
            foreach i in range(1,6)
                stmt_2.bind(i-1,loc.arr[i])
            end
            loc.clear_arr()
            stmt_2.just_exec()
            loc.iter_prepare()
            foreach i in range(1,6)
                stmt_1.bind(i-1,loc.arr[i])
            end
            loc.clear_arr()
            res = stmt_1.exec()
            loc.uuid = res[0][0].data
        else
            loc.uuid = res[0][0].data
        end
    end
end

function add_pro(item)
    var db = db_connector.start()
    db.just_exec("ALTER TABLE propertys AUTO_INCREMENT = 1")
    var stmt = db.prepare("INSERT INTO propertys(eq_name,eq_type,brand,wbdw,start_time,time_limit,sfjz,is_available,local_place,manager,signals) values(?,?,?,?,?,?,?,?,?,?,?)")
    item.iter_prepare()
    foreach i in range(1,12)
        stmt.bind(i-1, item.arr[i])
    end
    item.clear_arr()
    stmt.just_exec()
end

function add_pros(pros)
    var db = db_connector.start()
    db.just_exec("ALTER TABLE propertys AUTO_INCREMENT = 1")
    var stmt = db.prepare("INSERT INTO propertys(eq_name,eq_type,brand,wbdw,start_time,time_limit,sfjz,is_available,local_place,manager,signals) values(?,?,?,?,?,?,?,?,?,?,?)")
    foreach item in pros
        item.iter_prepare()
        foreach i in range(1,12)
            stmt.bind(i-1, item.arr[i])
        end
        item.clear_arr()
        stmt.just_exec()
    end
end

function add_req(info)
    var db = db_connector.start()
    db.just_exec("ALTER TABLE request_tb AUTO_INCREMENT = 1")
    var stmt = db.prepare("INSERT INTO request_tb(item_id,requester,commiter,signals,reason,request_time) values(?,?,?,?,?,?)")
    info.iter_prepare()
    foreach i in range(1,7)
        stmt.bind(i-1, info.arr[i])
    end
    info.clear_arr()
    stmt.just_exec()
end

function add_reqs(reqs)
    var db = db_connector.start()
    db.just_exec("ALTER TABLE request_tb AUTO_INCREMENT = 1")
    var stmt = db.prepare("INSERT INTO request_tb(item_id,requester,commiter,signals,reason,request_time) values(?,?,?,?,?,?)")
    foreach info in reqs
        info.iter_prepare()
        foreach i in range(1,7)
            stmt.bind(i-1, info.arr[i])
        end
        info.clear_arr()
        stmt.just_exec()
    end
end

# 查找驳回信息函数，传入管理员id和一个空数组，返回包含多条驳回信息的二维数组，每一行可以在construct()函数中构建结构体。
function find_reject(id, list)
    var db = db_connector.start()
    var stmt = db.prepare("SELECT * FROM request_tb WHERE requester=? AND signals=2")
    stmt.bind(0,id)
    var res_req = stmt.exec()
    var item_ids = {}, local_places = {}, res_pro = {}, res_pla = {}
    foreach i in res_req
        item_ids.push_back(i[1].data)
    end
    foreach i in item_ids
        stmt = db.prepare("SELECT * FROM propertys WHERE uuid=?")
        stmt.bind(0,i)
        var res = stmt.exec()
        res_pro.push_back(res[0])
    end
    foreach i in res_pro
        local_places.push_back(i[9].data)
    end
    foreach i in local_places
        stmt = db.prepare("SELECT * FROM places WHERE uuid=?")
        stmt.bind(0,i)
        var res = stmt.exec()
        res_pla.push_back(res[0])
    end
    foreach i in res_pro
        var temp = {}
        foreach j in i
            temp.push_back(j.data)
        end
        list.push_back(temp)
    end
    var x = 0
    foreach i in list
        foreach j in res_req[x]
            i.push_back(j.data)
        end
        x++
    end
    x = 0
    foreach i in list
        foreach j in res_pla[x]
            i.push_back(j.data)
        end
        x++
    end
end

# 修改物品信息表的函数，传入要修改的物品信息结构体，函数通过uuid确定要修改的条目。
function change_pro(item)
    var db = db_connector.start()
    var stmt = db.prepare("UPDATE propertys SET eq_name=?, eq_type=?, brand=?, wbdw=?, start_time=?, time_limit=?, sfjz=?, is_available=?, local_place=?, manager=?, signals=? WHERE uuid=?")
    item.iter_prepare()
    foreach i in range(1,12)
        stmt.bind(i-1, item.arr[i])
    end
    item.clear_arr()
    stmt.bind(11,item.uuid)
    stmt.just_exec()
end

# 修改申请信息表的函数，传入要修改的申请信息结构体，函数通过item_id和requester确定要修改的条目。
function change_req(info)
    var db = db_connector.start()
    var stmt = db.prepare("UPDATE request_tb SET signals=1, reason=? WHERE item_id=? AND requester=?")
    stmt.bind(0,info.reason)
    stmt.bind(1,info.item_id)
    stmt.bind(2,info.requester)
    stmt.just_exec()
end

function get_uuid_single(item)
    var db = db_connector.start()
    var stmt = db.prepare("SELECT uuid FROM propertys WHERE manager = ? AND start_time = ?")
    stmt.bind(0,item.manager)
    stmt.bind(1,item.start_time)
    var res = stmt.exec()
    item.uuid = res[0][0].data
end

function get_uuid_multi(group_admin, timestamp)
    var db = db_connector.start()
    var stmt = db.prepare("SELECT uuid FROM propertys WHERE manager = ? AND start_time = ?")
    stmt.bind(0,group_admin)
    stmt.bind(1,timestamp)
    var res = stmt.exec()
    return res
end

# 结构体构建函数，传入一个包含主表，申请表和地点表返回信息的数组（即find_reject传入的list），
# 以及三个空结构体，返回构建好的结构体
function construct(arr, pro, req, pla)
    pro.clear_arr()
    foreach i in range(0,12)
        pro.arr[i] = arr[i]
    end
    pro.assign()

    req.clear_arr()
    foreach i in range(0,7)
        req.arr[i] = arr[i+12]
    end
    req.assign()

    pla.clear_arr()
    foreach i in range(0,6)
        pla.arr[i] = arr[i+19]
    end
    pla.assign()

    # 打印录入的结构体
    show(pro, req, pla)
end

# 打印结构体到控制台
function show(pro, req, pla)
    pro.iter_prepare()
    pla.iter_prepare()
    req.iter_prepare()
    foreach i in pro.arr
        system.out.print(i)
        system.out.print(" ")
    end
    foreach i in req.arr
        system.out.print(i)
        system.out.print(" ")
    end
    foreach i in pla.arr
        system.out.print(i)
        system.out.print(" ")
    end
    system.out.print("\n")
end